<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Kernel | Ant-Veil]]></title>
  <link href="http://www.casparzhang.com/blog/categories/kernel/atom.xml" rel="self"/>
  <link href="http://www.casparzhang.com/"/>
  <updated>2015-05-22T16:56:06+08:00</updated>
  <id>http://www.casparzhang.com/</id>
  <author>
    <name><![CDATA[Caspar]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Use Non-export Symbol]]></title>
    <link href="http://www.casparzhang.com/blog/2015/05/21/use-non-export-symbol/"/>
    <updated>2015-05-21T18:38:25+08:00</updated>
    <id>http://www.casparzhang.com/blog/2015/05/21/use-non-export-symbol</id>
    <content type="html"><![CDATA[<p>最近在折腾 <a href="http://linux-iscsi.org">LIO</a>，里面的模块好多，有核心模块(<code>target_core_mod</code>)、前端驱动模块(<code>vhost-scsi</code>, <code>iscsi</code>, etc)、后端驱动模块(<code>target_core_iblock</code>, <code>target_core_file</code>, etc)。我想要实现某种程度的模块“热升级”，具体来说，比如<code>target_core_mod</code>这个核心模块升级了之后，想要和旧模块共存，新的前端和后端驱动在接入的时候直接使用新模块。</p>

<p>于是想当然地认为只要把编译出来的模块改个名字就好了。然而事情并没那么简单，中间碰到两个问题，首先就是本文要讲到的，导出符号(EXPORT_SYMBOL)重复的问题。其实问题很好理解，我改了个名字之后的模块(比如：<code>target_core_mod_new.ko</code>，在代码中还是会导出相同的符号，所以解决方法就是在新的模块中不导出这些符号，删掉所有的<code>EXPORT_SYMBOL()</code>宏。</p>

<p>可是问题又来了，我的后端驱动模块(比如：<code>target_core_iblock.ko</code>)需要依赖新的模块的函数，在无法导出符号的情况下，我没有办法使用后端驱动模块。稍微搜了一下，找到<code>kallsyms_lookup_name()</code>函数(<a href="http://lxr.free-electrons.com/source/kernel/kallsyms.c?v=2.6.33#L170">定义</a>)，这个函数传入一个类似 <strong><em>module:symbol</em></strong> 形式的参数，用于读取<code>/proc/kallsyms</code>中的符号表，找到对应的符号，然后返回符号的地址(即函数的入口)。</p>

<p>于是我拿了这个函数开开心心地去改代码了。以<code>target_complete_cmd()</code>这个函数为例，我在后端驱动模块的代码需要调用这个函数的地方：</p>

<!--more-->


<pre><code class="C">    target_complete_cmd(cmd, status);
    kfree(ibr);
</code></pre>

<p>把它改为这样：</p>

<pre><code class="C">    /* 参考 target_core_mod 里的函数原型，定义函数指针变量 */
    void (*target_complete_cmd_ptr)(struct se_cmd *, u8);
    /* 得到的是 target_complete_cmd 函数入口地址 */
    target_complete_cmd_ptr = (void *)kallsyms_lookup_name(
        "target_core_mod_new:target_complete_cmd");
    (*target_complete_cmd_ptr)(cmd, status);
    kfree(ibr);
</code></pre>

<p>稍微验证了一下，发现可以用了，于是开始改其他的。</p>

<p>结果——WTF! 一共有 40+个被引用的导出符号！一个一个改的话，这后端驱动的代码还能看么？</p>

<p>思来想去，觉得，该改的还是得改。决定写个宏包装一下，尽量提高一下可读性。</p>

<p>以下省略我反复碰壁的过程，直接上成品(some ideas was inspired by <a href="http://constellation.github.io/blog/2014/12/07/importing-hidden-kernel-symbols/">this post</a>, thanks!):</p>

<p>首先，新建一个头文件，把宏和一些函数指针定义都给丢到里面，比如叫<code>import_sym.h</code>:</p>

<pre><code class="C">#include &lt;linux/kallsyms.h&gt;

/* 先定义一个结构体存放所有可能用到的函数指针 */
struct symbol_set {
    &lt;snip...&gt;
    void (*target_complete_cmd)(struct se_cmd *, u8);
    &lt;snip...&gt;
};

/* 这个宏用于查找符号地址，并且做一点基本的错误检查 */
#define IMPORT_SYMBOL(name)                                             \
        sym.name = (typeof(name) *)kallsyms_lookup_name(                \
                        "target_core_mod_new:" #name);                  \
        pr_debug("symbol name: " #name ", symbol addr found: 0x%lx\n",  \
                (unsigned long)sym.name);                               \
        if (!sym.name)                                                  \
                return -EINVAL;

/*
 * 下面这两个宏会拼成一个函数，放在前后端驱动中，前面这个宏还定义了一个
 * 全局静态结构用于存放 symbol 的集合
 */
#define IMPORT_SYMBOL_START                                             \
static struct symbol_set sym;                                           \
static int __init_syms_lookup(void)                                     \
{

#define IMPORT_SYMBOL_END                                               \
        return 0;                                                       \
}

/* 下面这个宏用来替换前后端驱动中每个要引用原导出符号的语句 */
#define IMPORTED(name) (*sym.name)
</code></pre>

<p>接下来改前后端驱动的代码，还是以<code>target_core_iblock</code>为例：</p>

<pre><code class="C">#include "import_sym.h"

IMPORT_SYMBOL_START
IMPORT_SYMBOL(target_complete_cmd);
/* 这里还可以继续添加 IMPORT_SYMBOL 宏以查找更多需要用的符号 */
IMPORT_SYMBOL_END

&lt;snip...&gt;
/* 把 target_complete_cmd(cmd, status); 换掉 */
IMPORTED(target_complete_cmd)(cmd, status);

&lt;snip...&gt;
static int __init iblock_module_init(void)
{
    /* 在模块初始化的时候就找齐所有需要的符号地址 */
    int ret = __init_syms_lookup();
    if (ret)
        return ret;
    return IMPORTED(transport_subsystem_register)(&amp;iblock_template);
}
</code></pre>

<p>这样就可以了。</p>

<p>由于不再使用<code>EXPORT_SYMBOL()</code>，做出来的前后端驱动模块会不再显式依赖<code>target_core_mod</code>，必须得确保 core 模块先加载，才能让前后端驱动模块加载之后找到符号地址。卸载的时候 core 模块要最后卸载，否则会碰到空指针引发 Kernel Panic。这算是这个方案的一个不完美之处吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux Kernel 208.5d Panic Issue]]></title>
    <link href="http://www.casparzhang.com/blog/2015/05/21/208-day-crash-issue/"/>
    <updated>2015-05-21T15:39:33+08:00</updated>
    <id>http://www.casparzhang.com/blog/2015/05/21/208-day-crash-issue</id>
    <content type="html"><![CDATA[<p>最近线上碰到的问题，虽说早就有解决方案了，但是陆陆续续还是碰到很多没有升级内核的机器挂掉。记录一下以下内容，仅供参考。</p>

<p>现象是机器运行到一定天数(刚开始反馈集中在 208.5 天左右)就会主动挂掉，报告文章末尾的 CallTrace，所幸社区几年前就有了解决方案：</p>

<h2>Upstream Patch</h2>

<pre><code>commit 4cecf6d401a01d054afc1e5f605bcbfe553cb9b9
Author: Salman Qazi &lt;sqazi@google.com&gt;
Date:   Tue Nov 15 14:12:06 2011 -0800

    sched, x86: Avoid unnecessary overflow in sched_clock

    (Added the missing signed-off-by line)

    In hundreds of days, the __cycles_2_ns calculation in sched_clock
    has an overflow.  cyc * per_cpu(cyc2ns, cpu) exceeds 64 bits, causing
    the final value to become zero.  We can solve this without losing
    any precision.

    We can decompose TSC into quotient and remainder of division by the
    scale factor, and then use this to convert TSC into nanoseconds.

    Signed-off-by: Salman Qazi &lt;sqazi@google.com&gt;
    Acked-by: John Stultz &lt;johnstul@us.ibm.com&gt;
    Reviewed-by: Paul Turner &lt;pjt@google.com&gt;
    Cc: stable@kernel.org
    Signed-off-by: Peter Zijlstra &lt;a.p.zijlstra@chello.nl&gt;
    Link: http://lkml.kernel.org/r/20111115221121.7262.88871.stgit@dungbeetle.mtv.corp.google.com
    Signed-off-by: Ingo Molnar &lt;mingo@elte.hu&gt;
</code></pre>

<!--more-->


<h2>Red Hat Fix</h2>

<ul>
<li>Z-stream since 2.6.32-220.5.1.el6</li>
<li>Y-stream Since 2.6.32-226.el6</li>
</ul>


<h2>Ref Links</h2>

<ul>
<li><a href="http://kenichiokuyama.blogspot.hk/2011/12/schedclock-overflow-after-2085-days-in.html">http://kenichiokuyama.blogspot.hk/2011/12/schedclock-overflow-after-2085-days-in.html</a></li>
</ul>


<h2>Call Trace</h2>

<pre><code>[776183.791021] divide error: 0000 [#1] SMP
[776183.795055] last sysfs file: /sys/devices/system/cpu/cpu15/cache/index2/shared_cpu_map
[776183.803045] CPU 9
[776183.804967] Modules linked in: &lt;snip&gt;
[776183.844841]
[776183.846415] Modules linked in: &lt;snip&gt;
[776183.886217] Pid: 0, comm: swapper Not tainted &lt;kernel&gt;
[776183.895358] RIP: 0010:[&lt;ffffffff81059e15&gt;] [&lt;ffffffff81059e15&gt;] find_busiest_group+0x485/0xb50
[776183.904258] RSP: 0018:ffff880028283c80 EFLAGS: 00010246
[776183.909703] RAX: 0000000000000000 RBX: 0000000000000000 RCX: ffff88002828f900
[776183.917021] RDX: 0000000000000000 RSI: ffc2c20d09ff2179 RDI: 000000001dcd6500
[776183.924341] RBP: ffff880028283de0 R08: 0002c1ef5f24b5a6 R09: ffff88002828f910
[776183.931658] R10: 0000000000000000 R11: 0000000000000000 R12: ffff880028295f01
[776183.938977] R13: ffff88002828f900 R14: 0000000000015f40 R15: ffffffffffffffff
[776183.946296] FS: 0000000000000000(0000) GS:ffff880028280000(0000) knlGS:0000000000000000
[776183.954568] CS: 0010 DS: 0018 ES: 0018 CR0: 000000008005003b
[776183.960447] CR2: 00000000008cb028 CR3: 0000000c61a84000 CR4: 00000000000006e0
[776183.967776] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
[776183.975095] DR3: 0000000000000000 DR6: 00000000ffff0ff0 DR7: 0000000000000400
[776183.982418] Process swapper (pid: 0, threadinfo ffff880664a52000, task ffff880c6412f4c0)
[776183.990691] Stack:
[776183.992839] ffff880028283e40 ffff880028283d80 ffff880c7fc29600 ffff880028283e64
[776184.000247] &lt;0&gt; 0000000000000040 ffff880028283e58 0000000960cf4700 ffff88002828f5e0
[776184.008157] &lt;0&gt; 0000000028283ce0 ffff88002828f910 00000001ffffffff 0000000000000009
[776184.016303] Call Trace:
[776184.018884] &lt;IRQ&gt;
[776184.021138] [&lt;ffffffff8105af96&gt;] rebalance_domains+0x146/0x520
[776184.027193] [&lt;ffffffff8105b3bc&gt;] run_rebalance_domains+0x4c/0x150
[776184.033506] [&lt;ffffffff8106b1e0&gt;] __do_softirq+0xc0/0x1e0
[776184.039038] [&lt;ffffffff8100c18c&gt;] call_softirq+0x1c/0x30
[776184.044483] [&lt;ffffffff8100dd55&gt;] do_softirq+0x65/0xa0
[776184.049755] [&lt;ffffffff8106af2c&gt;] irq_exit+0x7c/0x90
[776184.054856] [&lt;ffffffff814b0710&gt;] smp_apic_timer_interrupt+0x70/0x9d
[776184.061343] [&lt;ffffffff8100bb53&gt;] apic_timer_interrupt+0x13/0x20
[776184.067485] &lt;EOI&gt;
[776184.069738] [&lt;ffffffff813bdc8a&gt;] ? poll_idle+0x2a/0x70
[776184.075097] [&lt;ffffffff813bdc73&gt;] ? poll_idle+0x13/0x70
[776184.080454] [&lt;ffffffff813bec86&gt;] ? menu_select+0xa6/0x330
[776184.086072] [&lt;ffffffff813bdbc9&gt;] cpuidle_idle_call+0x99/0x130
[776184.092042] [&lt;ffffffff81009888&gt;] cpu_idle+0xa8/0xe0
[776184.097143] [&lt;ffffffff814a0d64&gt;] ? start_secondary+0x1b4/0x2a0
[776184.103194] [&lt;ffffffff814a0d72&gt;] start_secondary+0x1c2/0x2a0
[776184.109072] Code: d8 b8 01 00 00 00 48 c1 eb 0a 48 85 db 0f 45 c3 41 89 45 08 48 8b 8d 00 ff ff ff 48 8b 45 a8 8b 51 08 48 c1 e0 0a 48 89 d3 31 d2 &lt;48&gt; f7 f3 48 8b 55 b0 48 89 45 a0 31 c0 48 85 d2 74 0f 48 8b 45
[776184.129029] RIP [&lt;ffffffff81059e15&gt;] find_busiest_group+0x485/0xb50
[776184.135529] RSP &lt;ffff880028283c80&gt;
[776184.139477] BUG: scheduling while atomic: swapper/0/0x10000100
[776184.139485] ---[ end trace 32313550323d1731 ]---
[776184.139586] Kernel panic - not syncing: Fatal exception in interrupt
[776184.139589] Pid: 0, comm: swapper Tainted: G D ---------------- &lt;kernel&gt;
[776184.139591] Call Trace:
[776184.139592] &lt;IRQ&gt; [&lt;ffffffff81062e85&gt;] ? panic+0xa5/0x1a0
[776184.139598] [&lt;ffffffff81352006&gt;] ? netoops+0x1c6/0x2a0
[776184.139601] [&lt;ffffffff81064ac5&gt;] ? kmsg_dump+0x135/0x180
[776184.139604] [&lt;ffffffff81062ae5&gt;] ? oops_exit+0x25/0x30
[776184.139606] [&lt;ffffffff814abafb&gt;] ? oops_end+0xeb/0x100
[776184.139609] [&lt;ffffffff8100f07b&gt;] ? die+0x5b/0x90
[776184.139612] [&lt;ffffffff814ab226&gt;] ? do_trap+0x136/0x150
[776184.139616] [&lt;ffffffff8100c80f&gt;] ? do_divide_error+0x8f/0xb0
[776184.139618] [&lt;ffffffff81059e15&gt;] ? find_busiest_group+0x485/0xb50
[776184.139623] [&lt;ffffffff8142124f&gt;] ? ip_rcv+0x26f/0x380
[776184.139626] [&lt;ffffffff8100bdbb&gt;] ? divide_error+0x1b/0x20
[776184.139629] [&lt;ffffffff81059e15&gt;] ? find_busiest_group+0x485/0xb50
[776184.139633] [&lt;ffffffff8105af96&gt;] ? rebalance_domains+0x146/0x520
[776184.139636] [&lt;ffffffff8105b3bc&gt;] ? run_rebalance_domains+0x4c/0x150
[776184.139639] [&lt;ffffffff8106b1e0&gt;] ? __do_softirq+0xc0/0x1e0
[776184.139642] [&lt;ffffffff8100c18c&gt;] ? call_softirq+0x1c/0x30
[776184.139644] [&lt;ffffffff8100dd55&gt;] ? do_softirq+0x65/0xa0
[776184.139647] [&lt;ffffffff8106af2c&gt;] ? irq_exit+0x7c/0x90
[776184.139650] [&lt;ffffffff814b0710&gt;] ? smp_apic_timer_interrupt+0x70/0x9d
[776184.139653] [&lt;ffffffff8100bb53&gt;] ? apic_timer_interrupt+0x13/0x20
[776184.139654] &lt;EOI&gt; [&lt;ffffffff813bdc8a&gt;] ? poll_idle+0x2a/0x70
[776184.139660] [&lt;ffffffff813bdc73&gt;] ? poll_idle+0x13/0x70
[776184.139663] [&lt;ffffffff813bec86&gt;] ? menu_select+0xa6/0x330
[776184.139666] [&lt;ffffffff813bdbc9&gt;] ? cpuidle_idle_call+0x99/0x130
[776184.139669] [&lt;ffffffff81009888&gt;] ? cpu_idle+0xa8/0xe0
[776184.139672] [&lt;ffffffff814a0d64&gt;] ? start_secondary+0x1b4/0x2a0
[776184.139676] [&lt;ffffffff814a0d72&gt;] ? start_secondary+0x1c2/0x2a0
[776184.325813] Modules linked in: &lt;snip&gt;
[776184.367794] CPU 1:
[776184.370036] Modules linked in: &lt;snip&gt;
[776184.412014] Pid: 0, comm: swapper Tainted: G D ---------------- &lt;kernel&gt;
[776184.423621] RIP: 0010:[&lt;ffffffff813bdc8a&gt;] [&lt;ffffffff813bdc8a&gt;] poll_idle+0x2a/0x70
[776184.431644] RSP: 0018:ffff88066495bea8 EFLAGS: 00000246
[776184.437128] RAX: ffff88066495bfd8 RBX: ffff88066495bed8 RCX: 0042e00b649a5000
[776184.444484] RDX: 000000000001f6a9 RSI: ffff88002821d610 RDI: ffffffff81a2fbc0
[776184.451844] RBP: ffffffff8100bb4e R08: 0000000000000000 R09: 0000000000000000
[776184.459201] R10: 0000000000000000 R11: 0000000000000000 R12: 0042dfee0e6ae400
[776184.466567] R13: 0000000000000000 R14: 0000000000000000 R15: 0000000561f5fe16
[776184.473927] FS: 0000000000000000(0000) GS:ffff880028200000(0000) knlGS:0000000000000000
[776184.482241] CS: 0010 DS: 0018 ES: 0018 CR0: 000000008005003b
[776184.488159] CR2: 00000000427b7078 CR3: 0000000651611000 CR4: 00000000000006e0
[776184.495520] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
[776184.502878] DR3: 0000000000000000 DR6: 00000000ffff0ff0 DR7: 0000000000000400
[776184.510236] Call Trace:
[776184.512861] [&lt;ffffffff813bdc73&gt;] ? poll_idle+0x13/0x70
[776184.518261] [&lt;ffffffff813bec86&gt;] ? menu_select+0xa6/0x330
[776184.523918] [&lt;ffffffff813bdbc9&gt;] ? cpuidle_idle_call+0x99/0x130
[776184.530096] [&lt;ffffffff81009888&gt;] ? cpu_idle+0xa8/0xe0
[776184.535408] [&lt;ffffffff814a0d64&gt;] ? start_secondary+0x1b4/0x2a0
[776184.541499] [&lt;ffffffff814a0d72&gt;] ? start_secondary+0x1c2/0x2a0
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MCE 的一些零散记录]]></title>
    <link href="http://www.casparzhang.com/blog/2013/06/06/some-misc-items-of-mce/"/>
    <updated>2013-06-06T00:00:00+08:00</updated>
    <id>http://www.casparzhang.com/blog/2013/06/06/some-misc-items-of-mce</id>
    <content type="html"><![CDATA[<p>以前也测过 MCE 相关的东西，但是惭愧，一直不清不楚。这两天稍微整理了一下相关知识，感觉见识还是很浅，记些零碎的东西在这，权当博客复活第一篇。如有理解错误，欢迎指出。</p>

<p>CPU 检测到硬件错误时，内核会报 Machine-check，根据硬件错误是否可以修正(CE, Correctable Error; UCE/UE, Un-correctable Error)，内核做出不同反应。CE 的话内核只把相关信息写到一个字符设备 <code>/dev/mcelog</code> 中，UE 的话是会在记录相关信息之余，还会做出不同处理，比如中断当前遇错的应用程序，或者 Panic. <code>[TODO: 这块相关的内核代码还得再看几遍]</code></p>

<p><code>/dev/mcelog</code> 中的信息可以用用户空间工具 <strong><a href="https://github.com/andikleen/mcelog">mcelog</a></strong> 来读取。<strong>mcelog</strong> 比较有意思的一个参数是 <code>--dmi</code>，可以尝试解析 ADDR 字段以获取诸如内存出厂信息，DIMM 位置等有用的信息，可是很遗憾在实际环境中这些 DIMM 信息基本上都是错的。 (mcelog 的 man page 说了，不要怪 Linux，得怪那稀奇古怪的主板厂商……)</p>

<p>man page 还有一个地方提到：</p>

<blockquote><p>The kernel prefers old messages over new. If the log buffer overflows only old ones will be kept.</p></blockquote>

<!--more-->


<p>查看内核代码中 <code>arch/x86/include/asm/mce.h</code>，有：</p>

<pre><code class="C">#define MCE_LOG_LEN 32

struct mce_log {
        char signature[12]; /* "MACHINECHECK" */
        unsigned len;       /* = MCE_LOG_LEN */
        unsigned next;
        unsigned flags;
        unsigned recordlen;     /* length of struct mce */
        struct mce entry[MCE_LOG_LEN];
};
</code></pre>

<p>这里的 <code>MCE_LOG_LEN</code> 就是 man page 中提到的 log buffer 长度。</p>

<p>内核中还有个 <code>mce_inject</code> 模块（<code>CONFIG_X86_MCE_INJECT=m/y</code>）,可以用于产生一些假的 MCE 以测试相关功能。需要配合用户空间工具 <strong><a href="https://github.com/andikleen/mce-inject/">mce-inject</a></strong> 来使用。</p>

<p>如果要做一个比较完整的测试，<strong><a href="https://github.com/andikleen/mce-test">mce-test</a></strong> 工具可以帮忙，其中会涉及一些 RAS 特性，比如 <strong><em>hwpoison</em></strong>(<code>Documentation/vm/hwpoison.txt</code>)，不过我现在的活儿不怎么管测试，暂时就没去回顾这个测试工具了。</p>

<p>先记这些，回头把细节都搞懂了再补充……</p>
]]></content>
  </entry>
  
</feed>
